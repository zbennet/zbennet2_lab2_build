{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","style","backgroundColor","val","DisplayLabel","this","React","Component","Table","i","squares","count","rows","renderSquare","ConnectFour","state","Array","fill","gameOver","setState","displayValue","handleClick","wins","j","line","k","push","cols","a","b","c","d","board","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.72535ae5.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {//function for each square\n  return (<button className=\"square\" onClick={props.onClick}\n    style={{\n      backgroundColor:props.val !==null? props.val:\"white\",}}></button>);\n}\nclass DisplayLabel extends React.Component {//function for winning label\n  render() {\n    return (<label className=\"displayLabel\">{this.props.val}</label>);\n  }\n}\nclass Table extends React.Component {//function for the game board table\n  renderSquare(i) {\n    return <Square val={this.props.squares[i]} onClick={() => this.props.onClick(i)} />//rendering a clickable square\n  }\n  render() {\n    let renderBoard = \"<div>\"\n    let rows = 6\n    let col = 7\n    let numberOfSquares = rows * col\n    let count = 0\n    for (let i = 0; i < numberOfSquares; i++) {\n      count += 1\n      if (i % 7 == 0) {\n        renderBoard += \"<div>{this.renderSquare(\" + i + \")}\"\n      } else {\n        renderBoard += \"{this.renderSquare(\" + i + \")}\"\n\n        if (count == 7) {\n          renderBoard += \"</div>\"\n          count = 0\n        }\n      }\n    }\n    renderBoard += \"</div>\"\n\n    return (\n      //rendering the table\n      <div>\n        <div>{this.renderSquare(0)}{this.renderSquare(1)}{this.renderSquare(2)}{this.renderSquare(3)}{this.renderSquare(4)}{this.renderSquare(5)}{this.renderSquare(6)}</div>\n        <div>{this.renderSquare(7)}{this.renderSquare(8)}{this.renderSquare(9)}{this.renderSquare(10)}{this.renderSquare(11)}{this.renderSquare(12)}{this.renderSquare(13)}</div>\n        <div>{this.renderSquare(14)}{this.renderSquare(15)}{this.renderSquare(16)}{this.renderSquare(17)}{this.renderSquare(18)}{this.renderSquare(19)}{this.renderSquare(20)}</div>\n        <div>{this.renderSquare(21)}{this.renderSquare(22)}{this.renderSquare(23)}{this.renderSquare(24)}{this.renderSquare(25)}{this.renderSquare(26)}{this.renderSquare(27)}</div>\n        <div>{this.renderSquare(28)}{this.renderSquare(29)}{this.renderSquare(30)}{this.renderSquare(31)}{this.renderSquare(32)}{this.renderSquare(33)}{this.renderSquare(34)}</div>\n        <div>{this.renderSquare(35)}{this.renderSquare(36)}{this.renderSquare(37)}{this.renderSquare(38)}{this.renderSquare(39)}{this.renderSquare(40)}{this.renderSquare(41)}</div>\n        <div></div>\n      </div>\n    )\n  }\n}\nclass ConnectFour extends React.Component {\n  //initializing the connect four game state\n  constructor(props) {\n    super(props)\n    this.state = {\n      count: 0,\n      squares: Array(42).fill(null),\n      'displayValue': null\n    }\n  }\n\n  handleClick(i) {\n    let squares = this.state.squares;\n    if (squares[i] || gameOver(squares)) {//if user clicks on a filled in square or game is completed do nothing\n      return;\n    }\n    //add square to the board and increase the count\n    squares[i] = this.state.count % 2 == 0 ? 'red' : 'yellow';\n    this.setState({\n      squares: squares,\n      count: this.state.count + 1\n    });\n    //if the last move wins connect four is still printed\n    if (gameOver(squares)) {//if the game is over after new square is added printing winning message\n      this.setState({ displayValue: \"Connect Four! \" + squares[i] + \" wins!\" });\n      return;\n    }\n    if (this.state.count == 41) {//if the board is filled\n      this.setState({ displayValue: \"Draw! Game Over\" });\n      return;\n    }\n  }\n\n  render() {\n    //load table and message label\n    return (\n      <div>\n        <Table onClick={(i) => this.handleClick(i)} squares={this.state.squares} />\n        <DisplayLabel val={this.state.displayValue} />\n      </div>\n    )\n  }\n}\nfunction gameOver(squares) {\n  //create an array of all possible wins\n  //in the future could test different board sizes and change the variables to find the combos\n  let wins = []\n  let rows = 6\n  let cols = 7\n  let connect = 4\n  for (let i = 0; i < rows - connect + 1; i++) {\n    for (let j = 0; j < cols; j++) {\n      let line = []\n      for (let k = 0; k < connect; k++) {\n        line.push(j + ((i + k) * cols))//possible solution\n      }\n      wins.push(line)//add to the list of possible solutions\n    }\n  }\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols - connect + 1; j++) {\n      let line = []\n      for (let k = j; k < j + connect; k++) {\n        line.push(k + (i * cols))\n      }\n      wins.push(line)\n    }\n  }\n  //if any win condition matches squares of a player on the table dont continue game\n  for (let i in wins) {\n    let [a, b, c, d] = wins[i];\n    if (squares[a] && squares[a] === squares[b] && squares[b] === squares[c] && squares[c] === squares[d]) {\n      return true;\n    }\n  }\n  return false;//continue game\n}\n\nlet board = <ConnectFour />\nReactDOM.render(\n  board,\n  document.getElementById('root')\n);"],"sourceRoot":""}